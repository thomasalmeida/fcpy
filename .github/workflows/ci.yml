name: CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Fix Git Safe Directory
        run: git config --global --add safe.directory /github/workspace

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt, clippy
          override: true

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        run: cargo test --all-features

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Lint code
        run: cargo clippy --all-targets -- -D warnings

      - name: Set version output
        id: set-version
        run: |
          VERSION=$(grep -m1 'version' Cargo.toml | cut -d '"' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  publish:
    name: Publish and Release
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fix Git Safe Directory
        run: git config --global --add safe.directory /github/workspace

      - name: Get latest tag
        id: get-tag
        run: |
          git fetch --tags --force
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Compare versions
        id: compare-versions
        run: |
          LATEST_VERSION=${LATEST_TAG#v}
          CURRENT_VERSION=${{ needs.test.outputs.version }}

          if [ "$(printf '%s\n' "$CURRENT_VERSION" "$LATEST_VERSION" | sort -V | head -n1)" != "$CURRENT_VERSION" ]; then
            echo "new_version=true" >> $GITHUB_OUTPUT
            echo "new_tag=v$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "new_version=false" >> $GITHUB_OUTPUT
          fi
        env:
          LATEST_TAG: ${{ steps.get-tag.outputs.latest_tag }}

      - name: Create Git Tag
        if: steps.compare-versions.outputs.new_version == 'true'
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git tag ${{ steps.compare-versions.outputs.new_tag }}
          git push origin ${{ steps.compare-versions.outputs.new_tag }}

      - name: Publish to Crates.io
        if: steps.compare-versions.outputs.new_version == 'true'
        run: cargo publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: Create GitHub Release
        if: steps.compare-versions.outputs.new_version == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.compare-versions.outputs.new_tag }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
